generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL")
}

enum UserRole {
  ADMIN
  USER
  OWNER
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  DECLINED
}

model User {
  id                    String                   @id @default(cuid())
  name                  String
  username              String?
  email                 String                   @unique
  emailVerified         DateTime?
  image                 String?
  password              String?
  isTwoFactorEnabled    Boolean                  @default(false)
  TwoFactorConfirmation TwoFactorConfirmation?
  role                  UserRole                 @default(USER)
  accounts              Account[]
  defaultOrgId          String?
  activeOrgId           String?
  orgRoles              OrganizationRole[]
  invitationsReceived   OrganizationInvitation[] @relation("invitationsReceived")
  invitationsSent       OrganizationInvitation[] @relation("invitationsSent")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Organization {
  id          String                   @id @default(cuid())
  name        String
  premium     Boolean                  @default(false)
  users       OrganizationRole[]
  invitations OrganizationInvitation[]
}

model OrganizationRole {
  id     String   @id @default(cuid())
  userId String
  orgId  String
  role   UserRole @default(USER)

  user User         @relation(fields: [userId], references: [id])
  org  Organization @relation(fields: [orgId], references: [id])

  @@unique([userId, orgId])
}

model OrganizationInvitation {
  id              String           @id @default(cuid())
  email           String
  status          InvitationStatus @default(PENDING)
  orgId           String
  org             Organization     @relation(fields: [orgId], references: [id])
  invitedByUserId String
  targetUserId    String?

  invitedByUser User  @relation(name: "invitationsSent", fields: [invitedByUserId], references: [id])
  targetUser    User? @relation(name: "invitationsReceived", fields: [targetUserId], references: [id])

  @@unique([email, orgId])
}

model VerificationToken {
  id        String   @id @default(cuid())
  email     String
  token     String   @unique
  expiresAt DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  email     String
  token     String   @unique
  expiresAt DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id        String   @id @default(cuid())
  email     String
  token     String   @unique
  expiresAt DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model InvitationToken {
  id        String   @id @default(cuid())
  email     String
  token     String   @unique
  expiresAt DateTime

  @@unique([email, token])
}
